[SERVICE]
    Flush               5
    Grace               30
    Log_Level           ${FLUENT_BIT_LOG_LEVEL}
    Parsers_File        /fluent-bit/parsers/parsers.conf
    Parsers_File        /fluent-bit/etc/custom_parsers.conf


# -----------------------------------------------------------------------------
# ログファイルを監視する
#
[INPUT]
    Name             tail
    Path             ${EFS_APPLICATION_MOUNT_PATH}/logs/system/messages,${EFS_APPLICATION_MOUNT_PATH}/logs/system/warn,${EFS_APPLICATION_MOUNT_PATH}/logs/system/error
    Tag              system.*
    Parser           syslog-rfc3164
    Path_Key         log_file
    Refresh_Interval 5
    Mem_Buf_Limit    50MB
    Buffer_Max_Size  1MB
    Skip_Long_Lines   On

[INPUT]
    Name                tail
    Path                ${EFS_APPLICATION_MOUNT_PATH}/logs/httpd/access_log
    Tag                 httpd_access
    Refresh_Interval    5
    Mem_Buf_Limit       50MB
    Buffer_Max_Size     1MB
    Skip_Long_Lines     On

[INPUT]
    Name                tail
    Path                ${EFS_APPLICATION_MOUNT_PATH}/logs/httpd/error_log
    Tag                 httpd_error
    Parser              apache_error
    Refresh_Interval    5
    Mem_Buf_Limit       50MB
    Buffer_Max_Size     1MB
    Skip_Long_Lines     On

[INPUT]
    Name                tail
    Path                ${EFS_APPLICATION_MOUNT_PATH}/logs/app/laravel*.log
    Tag                 application_log
    Parser              laravel_log_json
    Refresh_Interval    5
    Mem_Buf_Limit       50MB
    Buffer_Max_Size     1MB
    Skip_Long_Lines     On

# [INPUT]

#     Name                tail
#     Path                /efs/logs/app/laravel_error*.log
#     Tag                 application_error
#     Refresh_Interval    5


# -----------------------------------------------------------------------------
# ELBヘルスチェックログを除外する
#
[FILTER]
    Name                grep
    Match               httpd_access
    Exclude             log ^(?=.*ELB-HealthChecker\/2\.0).*$


# -----------------------------------------------------------------------------
# \x エスケープされた文字をデコードする
#
[FILTER]
    Name                lua
    Match               *
    script              /fluent-bit/conf/script.lua
    call                decode_value


# -----------------------------------------------------------------------------
# httpdのログをパースする
#
[FILTER]
    Name                parser
    Match               httpd_access
    Key_Name            log
    Parser              apache_custom


# -----------------------------------------------------------------------------
# Appのログをパースする
#
[FILTER]
    Name                parser
    Match               application_log
    Key_Name            log_details
    Parser              json


# -----------------------------------------------------------------------------
# システムログのログタイプを追加する
#
[FILTER]
    Name            modify
    Match           system.*
    Add             log_type system
    Add             container_name econas-app


# -----------------------------------------------------------------------------
# マルチライン
# [FILTER]
#     Name                    multiline
#     Match                   application_log
#     multiline.key_content   log
#     multiline.parser        laravel_multiline

# [FILTER]
#     Name                    multiline
#     Match                   application_error
#     multiline.key_content   log
#     multiline.parser        laravel_multiline


# -----------------------------------------------------------------------------
# エラーにタグを付ける
#
# 下記の設定は、エラーログを対象のタグにも残している(末尾のfalse)。
# エラーログストリームに配信できていることを確認したらtrueにして、それぞれのストリームだけに存在するようにする。
#
[FILTER]
    Name                rewrite_tag
    Match               *httpd_access*
    Rule                $log (emerg|alert|crit|error|\s4\d{2}\s|\s5\d{2}\s) httpd_error false

[FILTER]
    Name                rewrite_tag
    Match               *application_log*
    Rule                $log (?i)(production\.ERROR) application_error false

# -----------------------------------------------------------------------------
# FireLens経由のコンテナログにECSメタデータを追加（awslogsドライバー同等）
# FireLensのデフォルトタグは: <コンテナ名>-firelens-<タスクID>
#
[FILTER]
    Name                record_modifier
    Match               *-firelens-*
    Record              source stdout
    Record              log_driver awsfirelens_equivalent

# -----------------------------------------------------------------------------
# rawログとして処理（パース処理をスキップ）
#
[FILTER]
    Name                modify
    Match               *-firelens-*
    Add                 log_format raw
    Add                 processed_by fluent-bit-awslogs-equivalent

# -----------------------------------------------------------------------------
# コンテナ名に基づくログタグの追加
# 実際のコンテナ名に合わせてマッチパターンを調整
# FireLensのタグ形式: <container_name>-firelens-<task_id>
#
[FILTER]
    Name                record_modifier
    Match               init-container-firelens-*
    Record              container_type init-container

[FILTER]
    Name                record_modifier
    Match               *-firelens-*
    Record              container_type app-container
    
# デバッグ用: すべてのFireLensログにタグ情報を追加
[FILTER]
    Name                record_modifier
    Match               *-firelens-*
    Record              original_tag ${TAG}
    Record              debug_matched true

# -----------------------------------------------------------------------------
# POST | PUT | PATCH メソッドにタグを付ける
# [FILTER]
    # Name                rewrite_tag
    # Match               *-firelens-*
    # Rule                $log (API-INFO).*(POST|PUT|PATCH) api_activity-$container_id true


# -----------------------------------------------------------------------------
# Output Cloud Watch
#
[OUTPUT]
    Name                cloudwatch_logs
    Match               system.*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_prefix   system-
    auto_create_group   true
    log_retention_days  1

# -----------------------------------------------------------------------------
# FireLens経由のコンテナログをawslogsドライバーと同等の形式でCloudWatch Logsに出力
# コンテナ名ごとに分離して出力
#

# init-containerのログ出力
[OUTPUT]
    Name                cloudwatch_logs
    Match               init-container-firelens-*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     init-container
    auto_create_group   true
    log_retention_days  1
    log_format          json_lines

# すべてのFireLensログを一般的なマッチで拾う（フォールバック）
[OUTPUT]
    Name                cloudwatch_logs
    Match               *-firelens-*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     container-stdout
    auto_create_group   true
    log_retention_days  1
    log_format          json_lines

[OUTPUT]
    Name                cloudwatch_logs
    Match               *httpd_access*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     httpd_access
    auto_create_group   true
    log_retention_days  1

[OUTPUT]
    Name                cloudwatch_logs
    Match               *httpd_error*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     httpd_error
    auto_create_group   true
    log_retention_days  1

[OUTPUT]
    Name                cloudwatch_logs
    Match               *application_log*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     application
    auto_create_group   true
    log_retention_days  1

[OUTPUT]
    Name                cloudwatch_logs
    Match               *application_error*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     application_error
    auto_create_group   true
    log_retention_days  1

[OUTPUT]
    Name                cloudwatch_logs
    Match               *systemd_entrypoint*
    region              ${REGION}
    log_group_name      ${CLOUDWATCH_LOG_GROUP_ID}
    log_stream_name     systemd_entrypoint
    auto_create_group   true
    log_retention_days  1


# -----------------------------------------------------------------------------
# Output Kinesis firehose
#
[OUTPUT]
    Name                kinesis_firehose
    Match               *httpd_access*
    region              ${REGION}
    delivery_stream     ${FIREHOSE_HTTPD_STREAM_ID}

[OUTPUT]
    Name                kinesis_firehose
    Match               *httpd_error*
    region              ${REGION}
    delivery_stream     ${FIREHOSE_HTTPD_STREAM_ID}

[OUTPUT]
    Name                kinesis_firehose
    Match               *application_log*
    region              ${REGION}
    delivery_stream     ${FIREHOSE_APP_STREAM_ID}

[OUTPUT]
    Name                kinesis_firehose
    Match               *application_error*
    region              ${REGION}
    delivery_stream     ${FIREHOSE_APP_STREAM_ID}
