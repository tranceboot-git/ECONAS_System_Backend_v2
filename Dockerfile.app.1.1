# ------------------------------------------------------------------------------
# ECONAS
# アプリケーション イメージ（マルチステージ）
#
#
# 《ターゲット》
#
# - dev_app            ... ローカル開発用のアプリケーション
# - xserver_vps_app    ... XServer VPS テスト環境用のアプリケーション
#
#
# 《ビルド方法》
#
# ■ ビルドに使用するPCと同じCPUアーキテクチャのイメージをビルドする場合
# docker build --no-cache --build-arg EFS_APPLICATION_MOUNT_PATH=/efs --build-arg APP_DIRECTORY_PATH=/var/www/html -t econas-app:1.0 -f Dockerfile.app.1.0 .
#
# ■ BuildXでマルチプラットフォーム向けにイメージをビルドする場合（例は x86_64 向け）
# docker buildx build --load --no-cache --platform linux/amd64 --build-arg EFS_APPLICATION_MOUNT_PATH=/efs --build-arg APP_DIRECTORY_PATH=/var/www/html -t econas-app:1.0-x86_64 -f Dockerfile.app.1.0 .
#
#
# ------------------------------------------------------------------------------



FROM amazonlinux:2023.6.20250218.2 AS base
# FROM --platform=linux/amd64 amazonlinux:2023.6.20250218.2 AS base



# イメージのビルドに必要な引数
ARG SSL_ENABLED=true
ARG WORKER_MODE=false

ARG USER_NAME=ec2-user
ARG USER_ID=1000
ARG GROUP_ID=1000

ARG EFS_APPLICATION_MOUNT_PATH=/efs
ARG EPHEMERAL_STORAGE_TMP_PATH=/tmp

ARG INIT_SETTINGS_PATH=/var/init_settings

ARG DOCUMENT_ROOT_PATH=/var/app/source/public
ARG APP_DIRECTORY_PATH=/var/app/source
ARG APP_ENV_PATH=/var/app/source

ARG DOMAIN_NAME=localhost
ARG ADMIN_EMAIL=admin@localhost
ARG HTTPD_LOG_LEVEL=info


# -Composer
ARG COMPOSER_RELEASE_VERSION=2.8.5
ARG COMPOSER_GITHUB_COMMIT_HASH=ae208dc1e182bd45d99fcecb956501da212454a1
ARG COMPOSER_PATH=/usr/local/bin/composer
# Node
ARG NODE_VERSION=22.13.1


# 環境変数
ENV \
    # - パス設定
    PATH=/usr/local/bin:$PATH \
    # - デフォルトのロケールを日本語に設定する
    LANG=ja_JP.UTF-8 \
    LANGUAGE=ja_JP.UTF-8 \
    LC_ALL=ja_JP.UTF-8 \
    # - Composer
    COMPOSER_RELEASE_VERSION=${COMPOSER_RELEASE_VERSION} \
    COMPOSER_GITHUB_COMMIT_HASH=${COMPOSER_GITHUB_COMMIT_HASH} \
    COMPOSER_PATH=${COMPOSER_PATH} \
    \
    SSL_ENABLED=${SSL_ENABLED} \
    WORKER_MODE=${WORKER_MODE} \
    \
    USER_NAME=${USER_NAME} \
    USER_ID=${USER_ID} \
    GROUP_ID=${GROUP_ID} \
    \
    EFS_APPLICATION_MOUNT_PATH=${EFS_APPLICATION_MOUNT_PATH} \
    EPHEMERAL_STORAGE_TMP_PATH=${EPHEMERAL_STORAGE_TMP_PATH} \
    \
    INIT_SETTINGS_PATH=${INIT_SETTINGS_PATH} \
    \
    DOCUMENT_ROOT_PATH=${DOCUMENT_ROOT_PATH} \
    APP_DIRECTORY_PATH=${APP_DIRECTORY_PATH} \
    APP_ENV_PATH=${APP_ENV_PATH} \
    \
    DOMAIN_NAME=${DOMAIN_NAME} \
    ADMIN_EMAIL=${ADMIN_EMAIL} \
    HTTPD_LOG_LEVEL=${HTTPD_LOG_LEVEL} \
    \
    APP_NAME= \
    APP_URL= \
    LARAVEL_APP_KEY= \
    APP_DEBUG=false \
    APP_ENV=production \
    APP_LOG_LEVEL=info \
    \
    DB_CONNECTION=mysql \
    DB_HOST= \
    DB_PORT=3306 \
    DB_DATABASE= \
    DB_USERNAME= \
    DB_PASSWORD= \
    \
    MAIL_MAILER=smtp \
    MAIL_HOST= \
    MAIL_PORT=587 \
    MAIL_USERNAME= \
    MAIL_PASSWORD= \
    MAIL_ENCRYPTION=tls \
    MAIL_FROM_ADDRESS= \
    MAIL_FROM_NAME= \
    \
    AWS_ACCESS_KEY_ID= \
    AWS_SECRET_ACCESS_KEY= \
    AWS_DEFAULT_REGION=ap-northeast-1 \
    \
    SQS_DEFAULT_QUEUE= \
    SQS_EMAIL_QUEUE= \
    SQS_NOTIFICATION_QUEUE= \
    SQS_REPORT_QUEUE= \
    SQS_FILE_PROCESSING_QUEUE= \
    SQS_BATCH_QUEUE=${SQS_BATCH_QUEUE} \
    \
    COMPOSER_ALLOW_SUPERUSER=1


# 環境変数のバリデーション
RUN set -eux; \
    if [ -z "${EFS_APPLICATION_MOUNT_PATH}" ]; then \
        echo "Error: EFS_APPLICATION_MOUNT_PATH is not set" && exit 1; \
    fi && \
    if [ -z "${APP_DIRECTORY_PATH}" ]; then \
        echo "Error: APP_DIRECTORY_PATH is not set" && exit 1; \
    fi


# 設定は root ユーザで行う
USER root


# タイムゾーンを日本に設定する
RUN ln -sf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime


# 必要なパッケージをインストール
RUN set -eux; \
    yum update -y \
    && \
    dnf install -y \
    shadow-utils \
    glibc-langpack-ja \
    logrotate \
    cronie \
    bind-utils \
    telnet \
    # - Httpd
    httpd \
    httpd-devel \
    # - PHP関連パッケージ
    php \
    mod_php \
    php-cli \
    php-common \
    php-devel \
    php-gd \
    php-mysqlnd \
    php-mbstring \
    php-pdo \
    php-xml \
    php-opcache \
    php-fpm \
    php-json \
    php-curl \
    php-zip \
    php-intl \
    php-bcmath \
    php-soap \
    php-fileinfo \
    # - 開発ツール
    gcc \
    gcc-c++ \
    make \
    wget \
    tar \
    gzip \
    zip \
    unzip \
    git \
    vim \
    \
    python-pip \
    # - Node.js
    nodejs \
    npm \
    # - Admin tool
    iotop \
    htop \
    socat \
    wireshark-cli \
    && \
    # インストールされたPHPのバージョンを表示
    php -v \
    && \
    # apacheの設定でPHPを有効化
    echo "LoadModule php_module modules/libphp.so" > /etc/httpd/conf.modules.d/10-php.conf \
    && \
    echo "AddHandler php-script .php" >> /etc/httpd/conf.d/php.conf \
    && \
    echo "AddType text/html .php" >> /etc/httpd/conf.d/php.conf \
    && \
    echo "DirectoryIndex index.php" >> /etc/httpd/conf.d/php.conf \
    && \
    # クリーンアップ
    yum clean all


# Composer をインストールする
RUN set -eux; \
    cd /tmp && \
    curl -sS https://getcomposer.org/installer -o composer-setup.php && \
    php composer-setup.php --version=$COMPOSER_RELEASE_VERSION --install-dir=/usr/local/bin --filename=composer && \
    rm composer-setup.php && \
    chmod +x $COMPOSER_PATH


# Node.js をバージョン管理するための n をインストール
RUN set -eux; \
    npm install -g n \
    && n $NODE_VERSION
# yum でインストールした Node.js を削除
RUN set -eux; \
    yum remove nodejs npm -y


# ディレクトリを作成する
RUN set -eux; \
    mkdir -p ${INIT_SETTINGS_PATH} && \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf && \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf.d && \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord && \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord/supervisord.d && \
    \
    chmod -R 775 ${INIT_SETTINGS_PATH} && \
    \
    mkdir -p ${APP_DIRECTORY_PATH} && \
    mkdir -p ${APP_DIRECTORY_PATH}/storage && \
    mkdir -p ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    \
    mkdir -p ${APP_DIRECTORY_PATH}/pma && \
    mkdir -p ${APP_DIRECTORY_PATH}/pma/upload && \
    mkdir -p ${APP_DIRECTORY_PATH}/pma/export && \
    mkdir -p ${APP_DIRECTORY_PATH}/pma/tmp && \
    \
    mkdir -p /etc/httpd/extra && \
    mkdir -p /tmp/run/httpd && \
    mkdir -p /tmp/run/php-fpm && \
    mkdir -p /tmp/lib/php/session && \
    \
    chmod -R 775 /etc/httpd/extra && \
    chmod -R 775 /tmp/run/php-fpm && \
    chmod -R 775 /tmp/run/httpd && \
    chmod -R 775 /tmp/lib/php/session


# 設定ファイルをコピーする
COPY ./settings/app/etc/httpd/conf.modules.d/00-mpm.conf /etc/httpd/conf.modules.d/00-mpm.conf

COPY ./settings/app/etc/php.ini /etc/php.ini
COPY ./settings/app/usr/local/etc/php-fpm.conf /usr/local/etc/php-fpm.conf
COPY ./settings/app/usr/local/etc/php-fpm.d/www.conf /usr/local/etc/php-fpm.d/www.conf

COPY ./settings/app/etc/crontab /etc/crontab


# - php-fpm
RUN set -eux; \
    mkdir -p /run/php-fpm && \
    chown -R apache:apache /run/php-fpm && \
    rm -rf /var/log/php-fpm && \
    mkdir /var/log/php-fpm && \
    chown -R apache:apache /var/log/php-fpm


#
# ここまで - ベースイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - アプリケーション・ベースイメージ
#
FROM base AS app


# phpMyAdmin をダウンロードする
RUN set -eux; \
    wget https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.tar.gz && \
    tar xvf phpMyAdmin-5.2.1-all-languages.tar.gz && \
    mv phpMyAdmin-5.2.1-all-languages/* ${APP_DIRECTORY_PATH}/pma


# 設定ファイルをコピーする
# - logrotate
COPY ./settings/app/etc/logrotate.d/httpd /etc/logrotate.d/httpd
# - PhpMyAdmin
COPY ./settings/app/pma/config.inc.php ${APP_DIRECTORY_PATH}/pma/config.inc.php


# - ディレクトリ所有権とパーミッションを変更する
RUN set -eux; \
    chown -R root:apache ${APP_DIRECTORY_PATH}/pma && \
    chmod -R 770 \
        ${APP_DIRECTORY_PATH}/pma/upload \
        ${APP_DIRECTORY_PATH}/pma/export \
        ${APP_DIRECTORY_PATH}/pma/tmp


#
# ここまで - アプリケーション・ベースイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - 設定ファイルを準備する初期化コンテナのイメージ
#


FROM app AS init_container


# 設定ファイルを一時配置するディレクトリを作成する
#
# EFSのマウントはコンテナ起動時に行われるので、設定ファイルは一旦別のディレクトリに配置する
RUN set -eux; \
    mkdir -p ${INIT_SETTINGS_PATH} && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf && \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf.d && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord && \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord/supervisord.d && \
    \
    chmod -R 775 ${INIT_SETTINGS_PATH}

# 設定ファイルを一時配置ディレクトリへコピーする
COPY ./settings/app/etc/httpd/conf/httpd.prod.conf ${INIT_SETTINGS_PATH}/httpd/conf/httpd.prod.conf
COPY ./settings/app/etc/httpd/conf/httpd.dev.conf ${INIT_SETTINGS_PATH}/httpd/conf/httpd.dev.conf
COPY ./settings/app/etc/httpd/conf/httpd.xserver_vps.conf ${INIT_SETTINGS_PATH}/httpd/conf/httpd.xserver_vps.conf

COPY ./settings/app/etc/httpd/conf.d/app.prod.conf ${INIT_SETTINGS_PATH}/httpd/conf.d/app.prod.conf
COPY ./settings/app/etc/httpd/conf.d/app.dev.conf ${INIT_SETTINGS_PATH}/httpd/conf.d/app.dev.conf
COPY ./settings/app/etc/httpd/conf.d/app.xserver_vps.conf ${INIT_SETTINGS_PATH}/httpd/conf.d/app.xserver_vps.conf

COPY ./settings/app/etc/supervisord.conf ${INIT_SETTINGS_PATH}/supervisord/supervisord.conf
COPY ./settings/app/etc/supervisord.d/laravel-worker.ini ${INIT_SETTINGS_PATH}/supervisord/supervisord.d/laravel-worker.ini


# エントリーポイントのスクリプトをコピーする
COPY ./settings/app/build_configs_setup.sh /usr/local/bin/build_configs_setup.sh
RUN set -eux; \
    chmod +x /usr/local/bin/build_configs_setup.sh


ENTRYPOINT [ "/usr/local/bin/build_configs_setup.sh" ]


#
# ここまで - 設定ファイルを準備する初期化コンテナのイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - 開発用 アプリケーションイメージ
#
FROM app AS dev_app


# 開発だけで使用するパッケージをインストールする
RUN set -eux; \
    yum update -y \
    && \
    yum install -y \
    sudo \
    && \
    yum clean all


# Docker ホストと同じユーザを作成する
RUN set -eux; \
    groupadd -g $GROUP_ID $USER_NAME && \
    adduser -s /bin/bash -u $USER_ID -g $GROUP_ID $USER_NAME && \
    usermod -aG root $USER_NAME && \
    usermod -aG wheel $USER_NAME && \
    usermod -aG apache $USER_NAME && \
    usermod -aG $USER_NAME apache && \
    echo "$USER_NAME ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers


# ソースコードをコピーする
COPY ./source/ ${APP_DIRECTORY_PATH}/


# 書き込み可能ディレクトリを /tmp 以下に集約
RUN set -eux; \
    # 元の書き込み対象ディレクトリを削除
    rm -rf /etc/httpd/extra && \
    rm -rf ${APP_DIRECTORY_PATH}/storage && \
    rm -rf ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    rm -rf ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    rm -rf ${APP_DIRECTORY_PATH}/app/Lib/setting && \
    \
    # シンボリックリンクで従来のパスから参照
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/httpd/extra /etc/httpd/extra && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/app/storage ${APP_DIRECTORY_PATH}/storage && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/app/bootstrap/cache ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    ln -sf ${EFS_APPLICATION_MOUNT_PATH}/app/Lib/firmware ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    ln -sf ${EFS_APPLICATION_MOUNT_PATH}/app/Lib/setting ${APP_DIRECTORY_PATH}/app/Lib/setting && \
    \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/storage && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/app/Lib/setting


# 設定ファイルを配置するディレクトリを作成する
RUN set -eux; \
    mkdir -p ${INIT_SETTINGS_PATH} && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf && \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf.d && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord && \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord/supervisord.d && \
    \
    chmod -R 775 ${INIT_SETTINGS_PATH} && \
    \
    chown -R ${USER_ID}:${GROUP_ID} ${INIT_SETTINGS_PATH}


# 設定ファイルを配置するスクリプトをコピーする
COPY ./settings/app/copy_configs_setup.dev.sh /usr/local/bin/copy_configs_setup.sh
RUN set -eux; \
    chmod +x /usr/local/bin/copy_configs_setup.sh


# entrypoint.sh をコピーする
COPY ./settings/app/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN set -eux; \
    chmod +x /usr/local/bin/entrypoint.sh


# ポート
EXPOSE 8080


ENTRYPOINT [ "/bin/bash", "-c", "/usr/local/bin/copy_configs_setup.sh && sleep infinity" ]


#
# ここまで - 開発用 アプリケーションイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - 本番環境用 アプリケーションイメージ
#
FROM app AS prod_app


# Session Manager プラグインをインストールする
# https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/install-plugin-linux.html
RUN set -eux; \
    dnf install -y https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm


# ユーザを作成する
RUN set -eux; \
    groupadd -g ${GROUP_ID} ${USER_NAME} && \
    adduser -s /bin/bash -u ${USER_ID} -g ${GROUP_ID} ${USER_NAME} && \
    usermod -aG apache ${USER_NAME} && \
    usermod -aG ${USER_NAME} apache


# ソースコードをコピーする
COPY ./source/ ${APP_DIRECTORY_PATH}/
RUN set -eux; \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH} && \
    chmod -R 775 ${APP_DIRECTORY_PATH} && \
    \
    # アプリケーションの設定
    cd ${APP_DIRECTORY_PATH} && \
    npm install && \
    composer install && \
    php artisan config:clear && \
    php artisan cache:clear && \
    php artisan view:clear && \
    php artisan route:clear && \
    php artisan optimize:clear


# 書き込み可能ディレクトリを /tmp 以下に集約
RUN set -eux; \
    # 元の書き込み対象ディレクトリを削除
    rm -rf /etc/httpd/extra && \
    rm -rf ${APP_DIRECTORY_PATH}/storage && \
    rm -rf ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    rm -rf ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    rm -rf ${APP_DIRECTORY_PATH}/app/Lib/setting && \
    \
    # シンボリックリンクで従来のパスから参照
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/httpd/extra /etc/httpd/extra && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/app/storage ${APP_DIRECTORY_PATH}/storage && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/app/bootstrap/cache ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    ln -sf ${EFS_APPLICATION_MOUNT_PATH}/app/Lib/firmware ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    ln -sf ${EFS_APPLICATION_MOUNT_PATH}/app/Lib/setting ${APP_DIRECTORY_PATH}/app/Lib/setting && \
    \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/storage && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/app/Lib/setting


# 設定ファイルを配置するスクリプトをコピーする
COPY ./settings/app/copy_configs_setup.prod.sh /usr/local/bin/copy_configs_setup.sh
RUN set -eux; \
    chmod +x /usr/local/bin/copy_configs_setup.sh


# entrypoint.sh をコピーする
COPY ./settings/app/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN set -eux; \
    chmod +x /usr/local/bin/entrypoint.sh


# ポート
EXPOSE 8080


# デバッグ用にコンテナを終了させたくない場合は 'sleep infinity' を追加する
# ENTRYPOINT [ "/bin/bash", "-c", "/usr/local/bin/copy_configs_setup.sh && sleep infinity" ]
ENTRYPOINT [ "/bin/bash", "-c", "/usr/local/bin/copy_configs_setup.sh && /usr/local/bin/entrypoint.sh" ]




#
# ここまで - 本番環境用 アプリケーションイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - ワーカー・ベースイメージ
#
FROM base AS worker


# ディレクトリを作成する
RUN set -eux; \
    mkdir -p ${INIT_SETTINGS_PATH}/etc/supervisord.d


# 設定ファイルをコピーする
# - logrotate
COPY ./settings/app/etc/logrotate.d/supervisord /etc/logrotate.d/supervisord


# pyenvと最新のPythonをインストールする
# supervisorをインストールする
RUN set -eux; \
    yum install -y \
    git \
    gcc \
    make \
    zlib-devel \
    bzip2 \
    bzip2-devel \
    readline-devel \
    sqlite \
    sqlite-devel \
    openssl-devel \
    xz \
    xz-devel \
    libffi-devel && \
    \
    mkdir -p /opt/pyenv && \
    git clone https://github.com/pyenv/pyenv.git /opt/pyenv && \
    echo 'export PYENV_ROOT="/opt/pyenv"' >> /etc/profile.d/pyenv.sh && \
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /etc/profile.d/pyenv.sh && \
    echo 'eval "$(pyenv init --path)"' >> /etc/profile.d/pyenv.sh && \
    echo 'eval "$(pyenv init -)"' >> /etc/profile.d/pyenv.sh && \
    chmod +x /etc/profile.d/pyenv.sh && \
    \
    source /etc/profile.d/pyenv.sh && \
    \
    pyenv install 3.12.2 && \
    pyenv global 3.12.2 && \
    pip install --upgrade pip && \
    pip install supervisor


#
# ここまで - アプリケーション・ベースイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - 設定ファイルを準備する初期化コンテナのイメージ
#


FROM worker AS init_worker_container


# EFSのマウントポイントと同じディレクトリを作成する
#
# EFSをマウントしない環境に対応するため
RUN set -eux; \
    mkdir -p ${EFS_APPLICATION_MOUNT_PATH}


# 設定ファイルを一時配置するディレクトリを作成する
#
# EFSのマウントはコンテナ起動時に行われるので、設定ファイルは一旦別のディレクトリに配置する
RUN set -eux; \
    mkdir -p ${INIT_SETTINGS_PATH} && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf && \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf.d && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord && \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord/supervisord.d && \
    \
    chmod -R 775 ${INIT_SETTINGS_PATH}

# 設定ファイルを一時配置ディレクトリへコピーする
COPY ./settings/app/etc/httpd/conf/httpd.prod.conf ${INIT_SETTINGS_PATH}/httpd/conf/httpd.prod.conf
COPY ./settings/app/etc/httpd/conf/httpd.dev.conf ${INIT_SETTINGS_PATH}/httpd/conf/httpd.dev.conf
COPY ./settings/app/etc/httpd/conf/httpd.xserver_vps.conf ${INIT_SETTINGS_PATH}/httpd/conf/httpd.xserver_vps.conf

COPY ./settings/app/etc/httpd/conf.d/app.prod.conf ${INIT_SETTINGS_PATH}/httpd/conf.d/app.prod.conf
COPY ./settings/app/etc/httpd/conf.d/app.dev.conf ${INIT_SETTINGS_PATH}/httpd/conf.d/app.dev.conf
COPY ./settings/app/etc/httpd/conf.d/app.xserver_vps.conf ${INIT_SETTINGS_PATH}/httpd/conf.d/app.xserver_vps.conf

COPY ./settings/app/etc/supervisord.conf ${INIT_SETTINGS_PATH}/supervisord/supervisord.conf
COPY ./settings/app/etc/supervisord.d/laravel-worker.ini ${INIT_SETTINGS_PATH}/supervisord/supervisord.d/laravel-worker.ini

# エントリーポイントのスクリプトをコピーする
COPY ./settings/app/build_configs_setup.sh /usr/local/bin/build_configs_setup.sh
RUN set -eux; \
    chmod +x /usr/local/bin/build_configs_setup.sh


ENTRYPOINT [ "/bin/bash", "-c", "/usr/local/bin/build_configs_setup.sh" ]


#
# ここまで - 設定ファイルを準備する初期化コンテナのイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - 開発用 アプリケーションイメージ
#
FROM worker AS dev_worker


# ユーザを作成する
RUN set -eux; \
    groupadd -g ${GROUP_ID} ${USER_NAME} && \
    adduser -s /bin/bash -u ${USER_ID} -g ${GROUP_ID} ${USER_NAME} && \
    usermod -aG apache ${USER_NAME} && \
    usermod -aG ${USER_NAME} apache


# ソースコードをコピーする
COPY ./source/ ${APP_DIRECTORY_PATH}/


# 設定ファイルを配置するディレクトリを作成する
RUN set -eux; \
    mkdir -p ${INIT_SETTINGS_PATH} && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf && \
    mkdir -p ${INIT_SETTINGS_PATH}/httpd/conf.d && \
    \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord && \
    mkdir -p ${INIT_SETTINGS_PATH}/supervisord/supervisord.d && \
    \
    chmod -R 775 ${INIT_SETTINGS_PATH} && \
    \
    chown -R ${USER_ID}:${GROUP_ID} ${INIT_SETTINGS_PATH}


# 設定ファイルを配置するスクリプトをコピーする
COPY ./settings/app/copy_configs_setup.dev.sh /usr/local/bin/copy_configs_setup.sh
RUN set -eux; \
    chmod +x /usr/local/bin/copy_configs_setup.sh


# entrypoint.sh をコピーする
COPY ./settings/app/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN set -eux; \
    chmod +x /usr/local/bin/entrypoint.sh


# apache用に所有権とパーミッションを変更する
RUN set -eux; \
    chown -R ${USER_NAME}:apache ${EFS_APPLICATION_MOUNT_PATH} && \
    chown -R ${USER_NAME}:apache ${APP_DIRECTORY_PATH} && \
    \
    chown -R ${USER_NAME}:apache /etc/httpd/run && \
    chmod -R 775 /etc/httpd/run && \
    chown -R ${USER_NAME}:apache /run/httpd && \
    chmod -R 775 /run/httpd && \
    \
    chown -R ${USER_NAME}:apache /etc/httpd/extra && \
    \
    chown -R ${USER_NAME}:apache /var/lib/php/session && \
    \
    chown -R ${USER_NAME}:apache /run/php-fpm && \
    \
    chown -R ${USER_NAME}:apache /var/log/httpd && \
    \
    chown -R ${USER_NAME}:apache /opt/pyenv && \
    chown -R ${USER_NAME}:apache /opt/pyenv/shims && \
    chmod -R 775 /opt/pyenv && \
    chmod -R 775 /opt/pyenv/shims


# ENTRYPOINT [ "/bin/bash", "-c", "/usr/local/bin/copy_configs_setup.sh && /usr/local/bin/entrypoint.sh" ]
ENTRYPOINT [ "/bin/bash", "-c", "sleep infinity" ]


#
# ここまで - 開発用 アプリケーションイメージ
# ------------------------------------------------------------------------------




# ------------------------------------------------------------------------------
# ここから - 本番環境用 アプリケーションイメージ
#
FROM worker AS prod_worker


# ユーザを作成する
RUN set -eux; \
    groupadd -g ${GROUP_ID} ${USER_NAME} && \
    adduser -s /bin/bash -u ${USER_ID} -g ${GROUP_ID} ${USER_NAME} && \
    usermod -aG apache ${USER_NAME} && \
    usermod -aG ${USER_NAME} apache


# ソースコードをコピーする
COPY ./source/ ${APP_DIRECTORY_PATH}/
RUN set -eux; \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH} && \
    chmod -R 775 ${APP_DIRECTORY_PATH} && \
    \
    # アプリケーションの設定
    cd ${APP_DIRECTORY_PATH} && \
    npm install && \
    composer install && \
    php artisan config:clear && \
    php artisan cache:clear && \
    php artisan view:clear && \
    php artisan route:clear && \
    php artisan optimize:clear


# 書き込み可能ディレクトリを /tmp 以下に集約
RUN set -eux; \
    # 元の書き込み対象ディレクトリを削除
    rm -rf /etc/httpd/extra && \
    rm -rf ${APP_DIRECTORY_PATH}/storage && \
    rm -rf ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    rm -rf ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    rm -rf ${APP_DIRECTORY_PATH}/app/Lib/setting && \
    \
    # シンボリックリンクで従来のパスから参照
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/httpd/extra /etc/httpd/extra && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/app/storage ${APP_DIRECTORY_PATH}/storage && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/app/bootstrap/cache ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    ln -sf ${EFS_APPLICATION_MOUNT_PATH}/app/Lib/firmware ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    ln -sf ${EFS_APPLICATION_MOUNT_PATH}/app/Lib/setting ${APP_DIRECTORY_PATH}/app/Lib/setting && \
    \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/storage && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/bootstrap/cache && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/app/Lib/firmware && \
    chown -R ${USER_ID}:${GROUP_ID} ${APP_DIRECTORY_PATH}/app/Lib/setting


# pyenv の書き込み可能ディレクトリを /tmp 以下に集約
RUN set -eux; \
    # pyenv ディレクトリを削除
    rm -rf /opt/pyenv/shims && \
    rm -rf /opt/pyenv/versions && \
    \
    # pyenv ディレクトリをシンボリックリンクで従来のパスから参照
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/pyenv/shims /opt/pyenv/shims && \
    ln -sf ${EPHEMERAL_STORAGE_TMP_PATH}/pyenv/versions /opt/pyenv/versions


# 設定ファイルを配置するディレクトリを作成する
RUN set -eux; \
    chmod -R 775 ${INIT_SETTINGS_PATH} && \
    chown -R ${USER_ID}:${GROUP_ID} ${INIT_SETTINGS_PATH}


# 設定ファイルを配置するスクリプトをコピーする
COPY ./settings/app/copy_configs_setup.prod.sh /usr/local/bin/copy_configs_setup.sh
RUN set -eux; \
    chmod +x /usr/local/bin/copy_configs_setup.sh


# entrypoint.sh をコピーする
COPY ./settings/app/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN set -eux; \
    chmod +x /usr/local/bin/entrypoint.sh


ENTRYPOINT [ "/bin/bash", "-c", "/usr/local/bin/copy_configs_setup.sh && /usr/local/bin/entrypoint.sh" ]


#
# ここまで - 本番環境用 アプリケーションイメージ
# ------------------------------------------------------------------------------